# -*- coding: utf-8 -*-
"""Lab10 - 52000668

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m1Hl_C6jJ3w9R23haxnDajoS34wZW4JB
"""

# 1. Write a program for flipping two fair dice in 10,000 times, 
# calling X is the summation of both dice that appear on each roll.
# (a) Save the results of flipping dices into the variable x (list type).
# (b) Find the values of random variable X and save to variable X.
# (c) Calculate the probability distribution function of the random variable X 
# and store it in variable P (list type).
# (d) Calculate the characteristic parameters of random variable X including: 
# expectation, variance, standard deviation.

import random

def flipping(times):
  result = []
  while times != 0:
    dice1 = random.randint(1, 6)
    dice2 = random.randint(1, 6)
    result.append(dice1 + dice2)
    times -= 1
  return result

times = 10000
x = flipping(times)
X = [e for e in set(x)]

P = [x.count(e) / times for e in X]

print('x :', x)
print('X :', X)
print('P :', P)
print('sum P:', sum(P))

expectation = sum([X[index] * P[index] for index in range(len(X))])
variance = sum([pow(X[index] - expectation, 2) * P[index] for index in range(len(X))])
standardDeviation = pow(variance, 1/2)

print('expectation :', expectation)
print('variance :', variance)
print('standardDeviation :', standardDeviation)
# test
# import numpy as np
# print('standardDeviation :', np.std(x))

# 2
import math
import matplotlib.pyplot as plt
import numpy as np

def pmf_normal(x, mu, sigma):
  return (1 / (pow(2 * math.pi * sigma * sigma, 1/2))) * pow(math.e, -(pow(x - mu, 2) / (2 * sigma * sigma)))

def cdf_normal(x, mu, sigma):
  return 0.5 * (1 + math.erf((x - mu) / (sigma * pow(2, 1/2))))

# (a) Draw a graph representing the relationship between the random variable X 
# and the function pmf_normal.
def generator_data(a, b, size):
  n = (b - a) / (size - 1)
  result = []
  s = a
  while s < b:
    result.append(s)
    s += n;
  if len(result) < size:
    result.append(b)
  return result

def plot_pmf_normal(mu, sigma):
  # Plot the probability mass function of Normal(mu, sigma)

  X = generator_data(mu - 4 * sigma, mu + 4 * sigma, 1000)
  P_normal = [pmf_normal(x, mu, sigma) for x in X]
  
  plt.plot(X, P_normal, '-')
  plt.title('PMF of Normal(%.2f, %.2f)' %(mu, sigma))
  plt.xlabel('X')
  plt.ylabel('P')
  plt.show()

plot_pmf_normal(3, 4)
# (b) Draw a graph representing the relationship between the random variable X 
# and the function cdf_normal.
def plot_cdf_normal(mu, sigma):
  # Plot the Cumulative distribution function of Normal(mu, sigma)
  X = generator_data(mu - 4 * sigma, mu + 4 * sigma, 1000)
  P_normal = [cdf_normal(x, mu, sigma) for x in X]
  
  plt.plot(X, P_normal, 'r-')
  plt.title('CDF of Normal(%.2f, %.2f)' %(mu, sigma))
  plt.xlabel('X')
  plt.ylabel('P')
  plt.show()

plot_cdf_normal(3, 4)
# (c) For X is a normal random variable with mean μ=3 and variance σ2=16, 
# using two previous to find P{2< X <7} 
# z = (x - mu) / sigma = 2 - 3 = -1 / 4 = -0.25; z(-0.25) = 0.4013
# z = (x - mu) / sigma = 7 - 3 = 4 / 4 = 1; z(1) = 0.8413

mu = 3
sigma = pow(16, 1/2)
result = cdf_normal(7, mu, sigma) - cdf_normal(2, mu, sigma)
print('result :', result)

# 3. Read dataset population from file company-sales_data.csv
# Read all month of toothpaste, shampoo, facecream and show them using line chart.

import pandas as pd
import numpy  as np
import matplotlib.pyplot as plt

data = pd.DataFrame(pd.read_csv('./company-sales_data.csv'))
month = list(data['month_number'])
toothpaste = list(data['toothpaste'])
shampoo = list(data['shampoo'])
facecream = list(data['facecream'])

plt.plot(month, toothpaste)
plt.plot(month, shampoo)
plt.plot(month, facecream)
plt.xlabel('Month')
plt.ylabel('Produce')
plt.title('Dataset population from company sales')
plt.legend(['toothpaste', 'shampoo', 'facecream'])
plt.xticks(month, month)
# plt.yticks()
plt.show()

# 4. Find the frequency of each word in a given text (at least 300 words), 
# and draw a histogram of the frequency of word with parameter bin = 30.
import regex
import matplotlib.pyplot as plt
import numpy as np


plainText = '''
A wonderful serenity has taken possession of my entire soul, like these sweet mornings of spring which I enjoy with my whole heart. I am alone, and feel the charm of existence in this spot, which was created for the bliss of souls like mine. I am so happy, my dear friend, so absorbed in the exquisite sense of mere tranquil existence, that I neglect my talents. I should be incapable of drawing a single stroke at the present moment; and yet I feel that I never was a greater artist than now. When, while the lovely valley teems with vapour around me, and the meridian sun strikes the upper surface of the impenetrable foliage of my trees, and but a few stray gleams steal into the inner sanctuary, I throw myself down among the tall grass by the trickling stream; and, as I lie close to the earth, a thousand unknown plants are noticed by me: when I hear the buzz of the little world among the stalks, and grow familiar with the countless indescribable forms of the insects and flies, then I feel the presence of the Almighty, who formed us in his own image, and the breath of that universal love which bears and sustains us, as it floats around us in an eternity of bliss; and then, my friend, when darkness overspreads my eyes, and heaven and earth seem to dwell in my soul and absorb its power, like the form of a beloved mistress, then I often think with longing, Oh, would I could describe these conceptions, could impress upon paper all that is living so full and warm within me, that it might be the mirror of my soul, as my soul is the mirror of the infinite God! O my friend -- but it is too much for my strength -- I sink under the weight of the splendour of these visions!A wonderful serenity has taken possession of my entire soul, like these sweet mornings of spring which I enjoy with my whole heart. I am alone, and feel the charm of existence in this spot, which was created for the bliss of souls like mine. I am so happy, my dear friend, so absorbed in the exquisite sense of mere tranquil existence, that I neglect my talents. I should be incapable of drawing a single stroke at the present moment; and yet I feel that I never was a greater artist than now. When, while the lovely valley teems with vapour around me, and the meridian sun strikes the upper surface of the impenetrable foliage of my trees, and but a few stray gleams steal into the inner sanctuary, I throw myself down among the tall grass by the trickling stream; and, as I lie close to the earth, a thousand unknown plants are noticed by me: when I hear the buzz of the little world among the stalks, and grow familiar with the countless indescribable forms of the insects and⁣⁣
'''


print(plainText)
# print(len(plainText.split(' ')))

# remove all special character
plainText = regex.sub('[^A-Za-z0-9]+', ' ', plainText)
# remove space begin and end
plainText  = plainText.lower().strip().split(' ')


print(plainText)
plt.hist(plainText, bins=[e for e in range(0, 30, 1)])
plt.xticks(rotation=90)
plt.show()